name: Deploy Backend to Server

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install

      - name: 运行测试
        run: pnpm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install

      - name: 构建项目
        run: pnpm run build

      - name: 连接服务器并部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "开始部署后端应用..."
            
            # 进入项目目录
            cd /home/back-app
            
            # 备份当前代码
            if [ -d ".git" ]; then
              echo "备份当前代码..."
              git stash
            fi
            
            # 拉取最新代码
            echo "拉取最新代码..."
            git pull origin main
            
            # 停止并删除旧容器
            echo "停止旧容器..."
            docker stop back-app || true
            docker rm back-app || true
            
            # 删除旧镜像（可选，节省空间）
            echo "清理旧镜像..."
            docker image prune -f || true
            
            # 构建新镜像
            echo "构建新镜像..."
            docker build -t back-app .
            
            # 启动新容器
            echo "启动新容器..."
            docker run -d \
              --name back-app \
              -p 3000:3000 \
              --env-file .env \
              --restart unless-stopped \
              back-app
            
            # 等待服务启动
            echo "等待服务启动..."
            sleep 10
            
            # 检查容器状态
            echo "检查容器状态..."
            docker ps | grep back-app
            
            # 查看日志
            echo "查看最新日志..."
            docker logs --tail 20 back-app
            
            echo "部署完成！" 